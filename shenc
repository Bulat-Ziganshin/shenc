#!/bin/sh

# shell program templates processed by printf

# encrypt data from stdin into stdout
# printf args: encrypted_rsa_private rsa_public decrypt_program_template
encrypt_program_template='#!/bin/sh

# check that openssl works
openssl version >/dev/null || {
    echo "openssl is not available" >&2
    exit 1
}

# encrypted rsa private start
encrypted_rsa_private=$(cat <<end_of_doc
%s
end_of_doc)
# encrypted rsa private end

# rsa public start
rsa_public=$(cat <<end_of_doc
%s
end_of_doc)
# rsa public end

# generate and encrypt data password

data_password=$(openssl rand -hex 120)
if [ $? -ne 0 -o ${#data_password} -ne 240 ]; then
    echo "openssl rand failed" >&2
    exit 2
fi

encrypted_data_password=$(
    # print rsa public key and redirect it to fd 3
    echo "$rsa_public" | {
        printf %%s "$data_password" | openssl rsautl -pubin -inkey /dev/fd/3 -encrypt | openssl base64
    } 3<&0
) || {
    echo "openssl rsautl failed" >&2
    exit 2
}

# print decrypt program

printf '"'%s'"' "$encrypted_rsa_private" "$encrypted_data_password"

# encrypt stdin using data password and print encrypted result
# stdin goes into fd 3; password goes into fd 4
{
    printf %%s "$data_password" | { openssl aes-128-cbc -pass fd:4 ; } 4<&0 0<&3
} 3<&0 || {
    echo "openssl enc failed" >&2
    exit 2
}
'

# decrypt data from itself to stdout
# printf args: encrypted_rsa_private encrypted_data_password
decrypt_program_template='#/bin/sh

# check that openssl works
openssl version >/dev/null || {
    echo "openssl is not available" >&2
    exit 1
}

# encrypted rsa private start
encrypted_rsa_private=$(cat <<end_of_doc
%s
end_of_doc)
# encrypted rsa private end

# encrypted data password start
encrypted_data_password=$(cat <<end_of_doc
%s
end_of_doc)
# encrypted data password end

# decrypt data password using encrypted rsa private key
data_password=$(
    echo "$encrypted_rsa_private" | {
        echo "$encrypted_data_password" | openssl base64 -d | openssl rsautl -inkey /dev/fd/3 -decrypt
    } 3<&0
) || {
    echo "openssl rsautl failed" >&2
    exit 1
}

(
    # if script was run in pipe mode, cat stdin to stdout, otherwise cat script file
    [ "$0" = "/bin/sh" ] && cat || cat "$0"
) | (
    # read lines from stdin until marker has been found
    while read line; do
        if [ "$line" = "# encrypted file start" ]; then
            # now stdin is exactly at encrypted data, print data password to fd 4 and decrypt stdin
            {
                printf %%s "$data_password" | { openssl aes-128-cbc -d -pass fd:4 ; } 4<&0 0<&3
            } 3<&0 || {
                echo "openssl enc failed" >&2
                exit 2
            }
            exit 0
        fi
    done
    echo "Start marker for encrypted file part not found" >&2
    exit 1
); exit $?

# encrypted file start
'

# prints a part of the file between "# $part start" an "# $part end" markers
extract_file_part() {
    l_file=$1
    l_part=$2

    # find the line numbers of the start and the end markers
    l_start=$(grep -a -n "^# $l_part start$" "$l_file" | head -n1 | cut -f1 -d:) || {
        echo "Start marker for part $l_part not found in $l_file" >&2
        return 2
    }
    l_end=$(grep -a -n "^# $l_part end$" "$l_file" | head -n1 | cut -f1 -d:) || {
        echo "End marker for part $l_part not found in $l_file" >&2
        return 2
    }

    # check that the end marker is below the start marker with enough lines between them
    if [ $((l_end - l_start)) -lt 3 ]; then
        echo "Invalid start or end marker for part $l_part in $l_file" >&2
        return 2
    fi

    # print a part
    tail -n +$((l_start + 2)) "$l_file" | head -n $((l_end - l_start - 3))
}

print_usage() {
    cat >&2 <<end
Usage:
Key file generation:
shenc --generate-key >key-file

Encryption:
shenc --encrypt key-file <unencrypted-file >encrypted-file
 or
/bin/sh key-file <unencrypted-file >encrypted-file

Decryption:
shenc --decrypt <encrypted-file >decrypted-file
 or
/bin/sh encrypted-file >decrypted-file
 or
/bin/sh <encrypted-file >decrypted-file

Extract key from encrypted file:
shenc --extract-key <encrypted-file
end
}

generate_key() {
    encrypted_rsa_private=$(openssl genrsa -aes128 2048) || {
        echo "openssl genrsa failed" >&2
        exit 2
    }
    rsa_public=$(echo "$encrypted_rsa_private" | openssl rsa -pubout) || {
        echo "openssl rsa failed" >&2
        exit 2
    }
    printf "$encrypt_program_template" "$encrypted_rsa_private" "$rsa_public" "$decrypt_program_template"
}

encrypt() {
    key_file="$1"
    if [ ! -e "$key_file" ]; then
        echo "key file $key_file does not exist" >&2
        exit 1
    fi

    encrypted_rsa_private=$(extract_file_part "$key_file" "encrypted rsa private") || exit 2
    rsa_public=$(extract_file_part "$key_file" "rsa public") || exit 2

    data_password=$(openssl rand -hex 120)
    if [ $? -ne 0 -o ${#data_password} -ne 240 ]; then
        echo "openssl rand failed" >&2
        exit 2
    fi

    encrypted_data_password=$(
        # print rsa public key and redirect it to fd 3
        echo "$rsa_public" | {
            printf %s "$data_password" | openssl rsautl -pubin -inkey /dev/fd/3 -encrypt | openssl base64
        } 3<&0
    ) || {
        echo "openssl rsautl failed" >&2
        exit 2
    }

    printf "$decrypt_program_template" "$encrypted_rsa_private" "$encrypted_data_password"

    # encrypt stdin using data password, encrypted result will be written to the stdout
    # stdin goes into fd 3; password goes into fd 4
    {
        printf %s "$data_password" | { openssl aes-128-cbc -pass fd:4 ; } 4<&0 0<&3
    } 3<&0 || {
        echo "openssl enc failed" >&2
        exit 2
    }
}

decrypt() {
    encrypted_rsa_private=
    encrypted_data_password=
    line=
    next_line=
    unused=
    while read line; do
        if [ "$line" = "# encrypted rsa private start" ]; then
            read unused
            while read next_line; do
                if [ "$next_line" = "# encrypted rsa private end" ]; then
                    break
                fi
                if [ "$line" != "# encrypted rsa private start" ]; then
                    encrypted_rsa_private="$encrypted_rsa_private$line
"
                fi
                line=$next_line
            done
            if [ "$next_line" != "# encrypted rsa private end" ]; then
                echo "unexpected end of file, expected encrypted rsa private end marker" >&2
                exit 1
            fi
        fi

        if [ "$line" = "# encrypted data password start" ]; then
            read unused
            while read next_line; do
                if [ "$next_line" = "# encrypted data password end" ]; then
                    break
                fi
                if [ "$line" != "# encrypted data password start" ]; then
                    encrypted_data_password="$encrypted_data_password$line
"
                fi
                line=$next_line
            done
            if [ "$next_line" != "# encrypted data password end" ]; then
                echo "unexpected end of file, expected encrypted rsa private end marker" >&2
                exit 2
            fi
        fi

        if [ "$line" = "# encrypted file start" ]; then
            if [ -z "$encrypted_rsa_private" ]; then
                echo "encrypted rsa private was not found" >&2
                exit 2
            fi

            if [ -z "$encrypted_data_password" ]; then
                echo "encrypted data password was not found" >&2
                exit 2
            fi

            # decrypt data password using encrypted rsa private key
            data_password=$(
                echo "$encrypted_rsa_private" | {
                    echo "$encrypted_data_password" | openssl base64 -d | openssl rsautl -inkey /dev/fd/3 -decrypt
                } 3<&0
            ) || {
                echo "openssl rsautl failed" >&2
                exit 1
            }

            # now stdin is exactly at encrypted data, print data password to fd 4 and decrypt stdin
            {
                printf %s "$data_password" | { openssl aes-128-cbc -d -pass fd:4 ; } 4<&0 0<&3
            } 3<&0 || {
                echo "openssl enc failed" >&2
                exit 2
            }
            exit 0
        fi
    done
}

extract_key() {
    encrypted_rsa_private=
    line=
    next_line=
    unused=
    while read line; do
        if [ "$line" = "# encrypted rsa private start" ]; then
            read unused
            while read next_line; do
                if [ "$next_line" = "# encrypted rsa private end" ]; then
                    break
                fi
                if [ "$line" != "# encrypted rsa private start" ]; then
                    encrypted_rsa_private="$encrypted_rsa_private$line
"
                fi
                line=$next_line
            done
            if [ "$next_line" != "# encrypted rsa private end" ]; then
                echo "unexpected end of file, expected encrypted rsa private end marker" >&2
                exit 1
            fi
            #strip trailing newline
            encrypted_rsa_private=$(echo "$encrypted_rsa_private")

            rsa_public=$(echo "$encrypted_rsa_private" | openssl rsa -pubout) || {
                echo "openssl rsa failed" >&2
                exit 2
            }
            printf "$encrypt_program_template" "$encrypted_rsa_private" "$rsa_public" "$decrypt_program_template"
        fi
    done
}

# check that openssl works
openssl version >/dev/null || {
    echo "openssl is not available" >&2
    exit 1
}

case "$1" in
--generate-key)
    generate_key
    ;;

--encrypt)
    encrypt "$2"
    ;;

--decrypt)
    decrypt
    ;;

--extract-key)
    extract_key
    ;;

*)
    print_usage
    ;;
esac
